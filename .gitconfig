[user]
  name = Jonathan Almeida
  email = git@jonalmeida.com

[alias]
  remotes = remote -vvv
  diffhead = diff HEAD~1 HEAD
  aa = add --all
  cm = commit -m
  co = "!f() { PNAME=$(basename `git rev-parse --show-toplevel`); OWNER=$(echo $1 | cut -d':' -f1); BRANCH=$(echo $1 | cut -d':' -f2); git fetch git@github.com:$OWNER/$PNAME.git $BRANCH; git checkout FETCH_HEAD; }; f"
  main = checkout main
  amend = commit -a --amend
  new = checkout -b
  branches = branch -v
  remotes = remote -v
  conflicts = status -sb | grep ^UU
  s = status
  c = checkout
  il = !sh -c 'git ls-files -v | grep -E "^[a-z]"'
  ig = update-index --assume-unchanged
  rig = update-index --no-assume-unchanged
  rl = reflog
  l = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  ll = log --stat --abbrev-commit  --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%n%n%b'
  dsf = "!f() { [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\" && git diff --color \"$@\" | diff-so-fancy  | less -r; }; f"
  daf = !sh -c 'git dsf \"$1^\" \"$1\"' -


[color]
  ui = auto
  interactive = auto

[core]
  pager = less
  editor = nvim

[branch]
  autosetuprebase = always

[pull]
  # You can instruct git so that any pull uses rebase instead than merge and it preserves while doing so. Requires git 1.8.5+
  rebase = preserve

[push]
  default = simple

[funcname]
  java = ^[  ]*((public|static).*)$
  kotlin = ^[  ]*((fun).*)$

[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true

[commit]
  template = ~/.gitmessage
